<?php namespace Phlex\RedFox\Generator;

class EntityGenerator {

	/** @var string */
	protected $entity;
	/** @var string */
	protected $entityBasePathFile;
	/** @var string */
	protected $entityPathFile;
	/** @var  array */
	protected $tableInfo;
	/** @var  array */
	protected $entityInfo;

	public static function generate($entity){
		$generator = new static($entity);
		$generator->generateEntityBase();
//		$generator->generateModelBase();
		$generator->generateRepositoryBase();
//		$generator->generateEntity();
//		$generator->generateModel();
//		$generator->generateRepository();
	}

	protected function __construct($entity) {
		$this->entity = $entity;
		$this->tableInfo = json_decode(file_get_contents(getenv('root').'env/entities/'.$entity.'.info.json'), true);
		$this->entityInfo = json_decode(file_get_contents(getenv('root').'env/entities/'.$entity.'.json'), true);

		$this->entityBasePathFile = getenv('root').'.entitybase/';
		$this->entityPathFile = getenv('root').'/App/Entity/';
	}

	protected function generateEntityBase(){
		$template = <<<'TEMPLATE'
<?php namespace EntityBase;

/* This file is generated by the framework, do not modify! */

/**
{{referenceProperties}}
 */
abstract class {{entityName}}Base extends \Phlex\RedFox\Entity {

{{fields}}

{{constants}}

	/** @return \EntityModel\{{entityName}}Model */
	public function getModel() { return \EntityModel\{{entityName}}Model::instance(); }

{{referenceBlocks}}
}
TEMPLATE;

		$referenceBlockTemplate = <<<'TEMPLATE'
	#region {{refField}} reference

	protected function get{{uc_field}}() { return $this->{{field}}; }
	protected function get{{uc_refField}}() { return \EntityRepository\{{refEntity}}Repository::instance()->get( $this->{{field}} ); }
	protected function set{{uc_refField}}( \Entity\{{refEntity}} $related ) {
		if( $related instanceof \Entity\{{refEntity}} ) $this->{{field}} = $related->id;
		else trigger_error( 'Setting related to different entity (Expected: {{refEntity}})', E_USER_ERROR );
	}
	protected function unset{{uc_refField}}() { $this->{{field}} = null; }
	protected function isset{{uc_refField}}() { return !($this->{{field}} == null); }

	#endregion

TEMPLATE;

		$output = $template;

		$output = str_replace('{{entityName}}', $this->entity, $output);

		$fields = array();
		$constants = array();
		$referenceBlocks = array();
		$referenceProperties = array();
		foreach($this->entityInfo['fields'] as $name=>$field){

			$fields[] = "\t".$field['access'].' $'.$name.' = '.var_export($field['default'],true).';';

			if(array_key_exists('options', $this->tableInfo['fields'][$name])){
				foreach($this->tableInfo['fields'][$name]['options'] as $option){
					$constants[] = "\tconst ".strtoupper($name).'_'.strtoupper($option).' = "'.$option.'";';
				}
			}

			if(array_key_exists('reference', $this->entityInfo['fields'][$name]) && substr($this->entityInfo['fields'][$name]['reference'], 0, 1) != '?'){
				list($refEntity, $refField) = explode(' as ', $this->entityInfo['fields'][$name]['reference']);
				$refEntity = trim($refEntity);
				$refField = trim($refField);
				$uc_refField = ucfirst($refField);
				$field = $name;
				$uc_field = ucfirst($field);
				$refBlock = $referenceBlockTemplate;
				$refBlock = str_replace('{{refEntity}}',$refEntity,$refBlock);
				$refBlock = str_replace('{{refField}}',$refField,$refBlock);
				$refBlock = str_replace('{{uc_refField}}',$uc_refField,$refBlock);
				$refBlock = str_replace('{{field}}',$field,$refBlock);
				$refBlock = str_replace('{{uc_field}}',$uc_field,$refBlock);
				$referenceBlocks[] = $refBlock;

				$referenceProperties[] = " * @property $".$refField." \\Entity\\".$refEntity;
			}
		}

		$fields = join("\n", $fields);
		$constants = join("\n", $constants);
		$referenceBlocks = join("\n", $referenceBlocks);
		$referenceProperties = join("\n", $referenceProperties);

		$output = str_replace('{{fields}}', $fields, $output);
		$output = str_replace('{{constants}}', $constants, $output);
		$output = str_replace('{{referenceBlocks}}', $referenceBlocks, $output);
		$output = str_replace('{{referenceProperties}}', $referenceProperties, $output);


		file_put_contents($this->entityBasePathFile.$this->entity.'Base.php', $output);
	}

	protected function generateRepositoryBase(){
		$template = <<<'TEMPLATE'
<?php namespace EntityBase;

/* This file is generated by the framework, do not modify! */

abstract class {{entityName}}RepositoryBase extends \Phlex\RedFox\EntityRepository {

	protected static $__instance = null;

	protected function __construct() {
		$this->database = '{{database}}';
		$this->table = '{{table}}';
	}

	/**
	 * Creates a blank {{entityName}}
	 * @return \Entity\{{entityName}}
	 */
	protected function createNewEntity() { return new \Entity\{{entityName}}($this); }

	/**
	 * Checks if the given object is an {{entityName}}
	 * @param \Phlex\RedFox\Entity $object
	 * @return bool
	 */
	public function checkInstance($object) { return $object instanceof \Entity\{{entityName}}; }
}
TEMPLATE;
		$output = $template;
		$output = str_replace('{{entityName}}', $this->entity, $output);
		$output = str_replace('{{database}}', $this->tableInfo['database-alias'], $output);
		$output = str_replace('{{table}}', $this->tableInfo['table'], $output);
		file_put_contents($this->entityBasePathFile.$this->entity.'RepositoryBase.php', $output);

	}

}